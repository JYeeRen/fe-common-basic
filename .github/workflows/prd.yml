name: prd

on:
  push:
    tags:
      - 'release-*'
env:
  REGISTRY: 047719650035.dkr.ecr.us-east-1.amazonaws.com
  REPO: rt-customs/frontend-normal
  BUILD_MODE: prd
  BACKEND_HOST: //service-rt-normal.rntlogistic-us.com
  # VERSION_TAG: prd
#  ECS_CLUSTER: rt-customs_prod
#  ECS_SERVICE: frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_ACCESS_KEY_SECRET }}
          aws-region: 'us-east-1'

      - name: Login in ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Extract tag name
        id: extract_tag
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.VERSION_TAG }}
            ${{ env.REGISTRY }}/${{ env.REPO }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            BUILD_MODE=${{ env.BUILD_MODE }}
            BACKEND_HOST=${{ env.BACKEND_HOST }}

#      - name: Re-deploy ECS services
#        run: |
#          for service in ${{ env.ECS_SERVICE }}; do
#            aws ecs update-service \
#              --cluster ${{ env.ECS_CLUSTER }} \
#              --service ${service} \
#              --force-new-deployment || echo "‚ùå $service failed to re-deploy"
#          done
